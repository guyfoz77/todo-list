(()=>{"use strict";var e={d:(t,o)=>{for(var d in o)e.o(o,d)&&!e.o(t,d)&&Object.defineProperty(t,d,{enumerable:!0,get:o[d]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{I:()=>d});let o=[];class d{constructor(e,t){this.name=e,this.projectIndex=t,this.todos=[]}static addNewTodo(e,t,d,r="No due date."){const n={title:e,projectIndex:t,todoIndex:d,completed:!1,dueDate:r};o[t].todos.push(n)}static projectDeleter(e){o.splice(e,1)}todoDateEditor(e,t){this.todos[e].dueDate=t}todoDeleter(e){this.todos.splice(e,1)}static addNewProject(e,t){o.push(new d(e,t))}}function r(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function n(e,t,o,d){const r=document.createElement(e);return""!=t&&("object"==typeof t?t.forEach((e=>{r.classList.add(e)})):r.classList.add(t)),""!=o&&(r.value=o,r.textContent=o),""!=d&&(r.dataset.element=d),r}function a(e,o="No due date"){let d=n("div","todoCard","",""),r=n("div","completeButton","","");r.addEventListener("click",(()=>{d.classList.add("complete")}));let a=n("h2","",e,""),c=n("div","dateHolder","",""),s=n("h3","",o,"");c.append(s);let l=n("input","","","");return l.setAttribute("type","date"),l.value=o,l.addEventListener("blur",(e=>{const o=e.target.parentNode.parentNode.dataset.projectID,d=e.target.parentNode.parentNode.dataset.todoID;let r=l.value;t.Projects.projects[o].todoDateEditor(d,r),""!=r&&(s.textContent=`Due ${r}`),c.removeChild(c.firstChild),c.append(s)})),s.addEventListener("click",(()=>{c.removeChild(c.firstChild),c.append(l),l.focus()})),d.append(r,a,c),d}document.querySelector(".todoContainer");const c=document.querySelector(".projectList"),s=document.querySelector(".todoContainer");function l(){!function(){r(c);for(let e=0;e<o.length;e++){let t=n("div","projectCard",o[e].name,"");t.dataset.projectID=e,c.append(t)}}()}const i=document.querySelector(".newProjectButton"),u=document.querySelector(".newProjectInput"),p=document.querySelector(".projectList");i.addEventListener("click",(e=>{e.preventDefault(),""!=u.value&&(r(p),(0,t.addNewProject)(u.value),l(),u.value="")})),d.addNewProject("test project",0),d.addNewTodo("Test todo",0,0),d.addNewTodo("another test todo",0,1),d.addNewProject("second test project",1),d.addNewTodo("second test todo",1,0),d.addNewTodo("Yet another thing to do",1,1),console.log(o),function(e){r(s);for(let e=0;e<o[0].todos.length;e++){let t=a(o[0].todos[e].title,o[0].todos.dueDate);t.dataset.projectID=0,t.dataset.todoID=e,s.append(t)}}(),l()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FDMUNOLEVBQVFNLFdBQVcsMEJBQTJCLEVBQUcsR0FDakR5RCxRQUFRQyxJQUFJakUsR0RUTCxTQUF5QmtFLEdBQzVCOUMsRUFBYSxHQUNiLElBQUssSUFBSW9DLEVBQUksRUFBR0EsRUFBSXhELEVDVVIsR0RWcUNNLE1BQU1tRCxPQUFRRCxJQUFLLENBQ2hFLElBQUlXLEVBQWNoQyxFQUFnQm5DLEVDUzFCLEdEVHVETSxNQUFNa0QsR0FBR2hELE1BQU9SLEVDU3ZFLEdEVG9HTSxNQUFNSSxTQUNsSHlELEVBQVlqQyxRQUFRWSxVQ1FaLEVEUFJxQixFQUFZakMsUUFBUWUsT0FBU08sRUFDN0IsRUFBY2QsT0FBT3lCLEVBQ3pCLENBQ0osQ0NJQUMsR0FDQWIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9wcm9qZWN0U3RvcmFnZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcHJvamVjdE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2RvbUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3BhZ2VMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiZXhwb3J0IGxldCBwcm9qZWN0cyA9IFtdOyIsImltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vcHJvamVjdFN0b3JhZ2VcIjtcblxuZXhwb3J0IGNsYXNzIFByb2plY3Qge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHByb2plY3RJbmRleCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnByb2plY3RJbmRleCA9IHByb2plY3RJbmRleDtcbiAgICAgICAgdGhpcy50b2RvcyA9IFtdO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGROZXdUb2RvKHRpdGxlLCBwcm9qZWN0SW5kZXgsIHRvZG9JbmRleCwgZHVlRGF0ZSA9ICdObyBkdWUgZGF0ZS4nKSB7XG4gICAgICAgIGNvbnN0IHRvZG8gPSB7XG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICBwcm9qZWN0SW5kZXg6IHByb2plY3RJbmRleCxcbiAgICAgICAgICAgIHRvZG9JbmRleDogdG9kb0luZGV4LFxuICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGR1ZURhdGU6IGR1ZURhdGVcbiAgICAgICAgfVxuICAgICAgICBwcm9qZWN0c1twcm9qZWN0SW5kZXhdLnRvZG9zLnB1c2godG9kbyk7XG4gICAgfVxuXG4gICAgc3RhdGljIHByb2plY3REZWxldGVyKHByb2plY3RJbmRleCkge1xuICAgICAgICBwcm9qZWN0cy5zcGxpY2UocHJvamVjdEluZGV4LCAxKTtcbiAgICB9XG5cbiAgICB0b2RvRGF0ZUVkaXRvcih0b2RvSW5kZXgsIG5ld0RhdGUpIHtcbiAgICAgICAgdGhpcy50b2Rvc1t0b2RvSW5kZXhdLmR1ZURhdGUgPSBuZXdEYXRlO1xuICAgIH1cblxuICAgIHRvZG9EZWxldGVyKHRvZG9JbmRleCkge1xuICAgICAgICB0aGlzLnRvZG9zLnNwbGljZSh0b2RvSW5kZXgsIDEpO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgYWRkTmV3UHJvamVjdChuYW1lLCBwcm9qZWN0SW5kZXgpIHtcbiAgICAgICAgcHJvamVjdHMucHVzaChuZXcgUHJvamVjdChuYW1lLCBwcm9qZWN0SW5kZXgpKTtcbiAgICB9XG59XG5cbi8vIGZ1bmN0aW9uIHByb2plY3RCdWlsZGVyKG5hbWUsIHByb2plY3RJbmRleCkgeyAvL2ZhY3RvcnkgZnVuY3Rpb24gdG8gYnVpbGQgbmV3IHByb2plY3Qgb2JqZWN0LlxuLy8gICAgIGxldCB0b2RvcyA9IFtdO1xuLy8gICAgIGZ1bmN0aW9uIHRvZG9EYXRlRWRpdG9yKHRvZG9JbmRleCwgbmV3RGF0ZSkge1xuLy8gICAgICAgICB0aGlzLnRvZG9zW3RvZG9JbmRleF0uZHVlRGF0ZSA9IG5ld0RhdGU7XG4vLyAgICAgfVxuLy8gICAgIGZ1bmN0aW9uIHRvZG9EZWxldGVyKHRvZG9JRCl7XG4vLyAgICAgICAgIHRoaXMudG9kb3Muc3BsaWNlKHRvZG9JRCwgMSk7XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiB7XG4vLyAgICAgICAgIG5hbWU6IG5hbWUsXG4vLyAgICAgICAgIHByb2plY3RJbmRleDogcHJvamVjdEluZGV4LFxuLy8gICAgICAgICB0b2RvczogdG9kb3MsXG4vLyAgICAgICAgIHRvZG9EYXRlRWRpdG9yOiB0b2RvRGF0ZUVkaXRvcixcbi8vICAgICAgICAgdG9kb0RlbGV0ZXI6IHRvZG9EZWxldGVyXG4vLyAgICAgfVxuLy8gfVxuLy8gZnVuY3Rpb24gdG9kb0J1aWxkZXIodGl0bGUsIHByb2plY3RJbmRleCwgdG9kb0luZGV4LCBkdWVEYXRlID0gJ05vIGR1ZSBkYXRlLicpIHsgLy9wcm9qZWN0SW5kZXggcmVmZXJzIHRvIHRoZSBwb3NpdGlvbiBvZiB0aGUgcGFyZW50IHByb2plY3QgaW4gdGhlIGFycmF5IG9mIHByb2plY3RzLlxuLy8gICAgIHJldHVybiB7XG4vLyAgICAgICAgIHRpdGxlOiB0aXRsZSxcbi8vICAgICAgICAgcHJvamVjdEluZGV4OiBwcm9qZWN0SW5kZXgsXG4vLyAgICAgICAgIHRvZG9JbmRleDogdG9kb0luZGV4LFxuLy8gICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuLy8gICAgICAgICBkdWVEYXRlOiBkdWVEYXRlXG4vLyAgICAgfVxuLy8gfVxuLy8gZXhwb3J0IGZ1bmN0aW9uIHByb2plY3REZWxldGVyKHByb2plY3RJbmRleCkge1xuLy8gICAgIFByb2plY3QucHJvamVjdHMuc3BsaWNlKHByb2plY3RJbmRleCwgMSk7XG4vLyB9XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBhZGROZXdQcm9qZWN0KG5hbWUsIHByb2plY3RJbmRleCkge1xuLy8gICAgIHByb2plY3RzLnB1c2gobmV3IFByb2plY3QobmFtZSwgcHJvamVjdEluZGV4KSk7XG4vLyB9XG4vLyBleHBvcnQgZnVuY3Rpb24gYWRkTmV3VG9kbyh0aXRsZSwgcHJvamVjdEluZGV4LCB0b2RvSW5kZXgsIGR1ZURhdGUgPSAnTm8gZHVlIGRhdGUuJykge1xuLy8gICAgIFByb2plY3QucHJvamVjdHNbcHJvamVjdEluZGV4XS50b2Rvcy5wdXNoKHRvZG9CdWlsZGVyKHRpdGxlLCBwcm9qZWN0SW5kZXgsIHRvZG9JbmRleCwgZHVlRGF0ZSkpO1xuLy8gfSIsImltcG9ydCB7IFByb2plY3RzIH0gZnJvbSBcIi4vcHJvamVjdE1hbmFnZXJcIjtcblxuY29uc3QgdG9kb0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvQ29udGFpbmVyJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckVsZW1lbnQoZWxlbWVudCkge1xuICAgIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRCdWlsZGVyKGVsZW1lbnQsIGNsYXNzTGlzdCwgdGV4dENvbnRlbnQsIGRhdGFOYW1lKSB7ICAvL2VsZW1lbnQgYnVpbGRlciBjb3BpZWQgYW5kIG1vZGlmaWVkIGZyb20gcHJldmlvdXMgcHJvamVjdC5cbiAgICBjb25zdCB4ZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgaWYgKGNsYXNzTGlzdCAhPSAnJykge1xuICAgICAgICBpZiAodHlwZW9mIGNsYXNzTGlzdCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY2xhc3NMaXN0LmZvckVhY2goY2xhc3NMYWJlbCA9PiB7XG4gICAgICAgICAgICAgICAgeGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc0xhYmVsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgeGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc0xpc3QpO1xuICAgIH1cbiAgICBpZiAodGV4dENvbnRlbnQgIT0gJycpIHtcbiAgICAgICAgeGVsZW1lbnQudmFsdWUgPSB0ZXh0Q29udGVudDtcbiAgICAgICAgeGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcbiAgICB9XG4gICAgaWYgKGRhdGFOYW1lICE9ICcnKSB4ZWxlbWVudC5kYXRhc2V0LmVsZW1lbnQgPSBkYXRhTmFtZTtcbiAgICByZXR1cm4geGVsZW1lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0Q2FyZEJ1aWxkZXIobmFtZSkge1xuICAgIGxldCBwcm9qZWN0Q2FyZCA9IGVsZW1lbnRCdWlsZGVyKCdkaXYnLCAncHJvamVjdENhcmQnLCBuYW1lLCAnJyk7XG4gICAgcmV0dXJuIHByb2plY3RDYXJkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9kb0NhcmRCdWlsZGVyKHRpdGxlLCBkdWVEYXRlID0gJ05vIGR1ZSBkYXRlJykgeyBcbiAgICBsZXQgdG9kb0NhcmQgPSBlbGVtZW50QnVpbGRlcignZGl2JywgJ3RvZG9DYXJkJywgJycsICcnKTtcbiAgICBsZXQgY29tcGxldGUgPSBlbGVtZW50QnVpbGRlcignZGl2JywgJ2NvbXBsZXRlQnV0dG9uJywgJycsICcnKTtcbiAgICAgICAgY29tcGxldGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0b2RvQ2FyZC5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZScpO1xuICAgICAgICB9KVxuICAgIGxldCB0b2RvVGl0bGUgPSBlbGVtZW50QnVpbGRlcignaDInLCAnJywgdGl0bGUsICcnKTtcbiAgICBsZXQgdG9kb0RhdGVIb2xkZXIgPSBlbGVtZW50QnVpbGRlcignZGl2JywgJ2RhdGVIb2xkZXInLCAnJywgJycpO1xuICAgIGxldCB0b2RvRHVlRGF0ZSA9IGVsZW1lbnRCdWlsZGVyKCdoMycsICcnLCBkdWVEYXRlLCAnJyk7XG4gICAgdG9kb0RhdGVIb2xkZXIuYXBwZW5kKHRvZG9EdWVEYXRlKTtcbiAgICBsZXQgdG9kb0R1ZURhdGVQaWNrZXIgPSBlbGVtZW50QnVpbGRlcignaW5wdXQnLCAnJywgJycsICcnKTtcbiAgICAgICAgdG9kb0R1ZURhdGVQaWNrZXIuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImRhdGVcIik7XG4gICAgICAgIHRvZG9EdWVEYXRlUGlja2VyLnZhbHVlID0gZHVlRGF0ZVxuICAgICAgICAgICAgdG9kb0R1ZURhdGVQaWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdElEID0gZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLmRhdGFzZXQucHJvamVjdElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvZG9JRCA9IGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5kYXRhc2V0LnRvZG9JRDtcbiAgICAgICAgICAgICAgICBsZXQgbmV3RHVlRGF0ZSA9IHRvZG9EdWVEYXRlUGlja2VyLnZhbHVlO1xuICAgICAgICAgICAgICAgIFByb2plY3RzLnByb2plY3RzW3Byb2plY3RJRF0udG9kb0RhdGVFZGl0b3IodG9kb0lELCBuZXdEdWVEYXRlKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3RHVlRGF0ZSAhPSAnJykgdG9kb0R1ZURhdGUudGV4dENvbnRlbnQgPSBgRHVlICR7bmV3RHVlRGF0ZX1gO1xuICAgICAgICAgICAgICAgIHRvZG9EYXRlSG9sZGVyLnJlbW92ZUNoaWxkKHRvZG9EYXRlSG9sZGVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIHRvZG9EYXRlSG9sZGVyLmFwcGVuZCh0b2RvRHVlRGF0ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB0b2RvRHVlRGF0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRvZG9EYXRlSG9sZGVyLnJlbW92ZUNoaWxkKHRvZG9EYXRlSG9sZGVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgdG9kb0RhdGVIb2xkZXIuYXBwZW5kKHRvZG9EdWVEYXRlUGlja2VyKTtcbiAgICAgICAgICAgIHRvZG9EdWVEYXRlUGlja2VyLmZvY3VzKCk7XG4gICAgICAgIH0pXG4gICAgdG9kb0NhcmQuYXBwZW5kKGNvbXBsZXRlLCB0b2RvVGl0bGUsIHRvZG9EYXRlSG9sZGVyKTtcbiAgICByZXR1cm4gdG9kb0NhcmQ7XG59XG4iLCJpbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSBcIi4vcHJvamVjdE1hbmFnZXJcIjtcbmltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vcHJvamVjdFN0b3JhZ2VcIjtcbmltcG9ydCB7IGVsZW1lbnRCdWlsZGVyLCBwcm9qZWN0Q2FyZEJ1aWxkZXIsIHRvZG9DYXJkQnVpbGRlciwgY2xlYXJFbGVtZW50IH0gZnJvbSBcIi4vZG9tQ29udHJvbGxlclwiO1xuXG5jb25zdCBwcm9qZWN0TGlzdENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0TGlzdCcpO1xuY29uc3QgdG9kb0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvQ29udGFpbmVyJyk7XG5cbmZ1bmN0aW9uIHByb2plY3RMaXN0QnVpbGRlcigpIHtcbiAgICBjbGVhckVsZW1lbnQocHJvamVjdExpc3RDb250YWluZXIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG5ld1Byb2plY3RDYXJkID0gcHJvamVjdENhcmRCdWlsZGVyKHByb2plY3RzW2ldLm5hbWUpO1xuICAgICAgICBuZXdQcm9qZWN0Q2FyZC5kYXRhc2V0LnByb2plY3RJRCA9IGk7XG4gICAgICAgIHByb2plY3RMaXN0Q29udGFpbmVyLmFwcGVuZChuZXdQcm9qZWN0Q2FyZCk7XG4gICAgfVxufVxuXG4vL3RvZG9DYXJkQnVpbGRlcih0aXRsZSwgaWQsIGR1ZURhdGUgPSAnTm8gZHVlIGRhdGUnKVxuZXhwb3J0IGZ1bmN0aW9uIHRvZG9MaXN0QnVpbGRlcihhY3RpdmVQcm9qZWN0SW5kZXgpIHtcbiAgICBjbGVhckVsZW1lbnQodG9kb0NvbnRhaW5lcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0c1thY3RpdmVQcm9qZWN0SW5kZXhdLnRvZG9zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBuZXdUb2RvQ2FyZCA9IHRvZG9DYXJkQnVpbGRlcihwcm9qZWN0c1thY3RpdmVQcm9qZWN0SW5kZXhdLnRvZG9zW2ldLnRpdGxlLCBwcm9qZWN0c1thY3RpdmVQcm9qZWN0SW5kZXhdLnRvZG9zLmR1ZURhdGUpO1xuICAgICAgICBuZXdUb2RvQ2FyZC5kYXRhc2V0LnByb2plY3RJRCA9IGFjdGl2ZVByb2plY3RJbmRleDtcbiAgICAgICAgbmV3VG9kb0NhcmQuZGF0YXNldC50b2RvSUQgPSBpO1xuICAgICAgICB0b2RvQ29udGFpbmVyLmFwcGVuZChuZXdUb2RvQ2FyZCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFnZUxvYWRlcigpIHtcbiAgICBwcm9qZWN0TGlzdEJ1aWxkZXIoKTtcbn0iLCJpbXBvcnQgeyBQcm9qZWN0LCBhZGROZXdQcm9qZWN0LCBhZGROZXdUb2RvIH0gZnJvbSBcIi4vcHJvamVjdE1hbmFnZXJcIjtcbmltcG9ydCB7IGNsZWFyRWxlbWVudCB9IGZyb20gXCIuL2RvbUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IHBhZ2VMb2FkZXIsIHRvZG9MaXN0QnVpbGRlciB9IGZyb20gXCIuL3BhZ2VMb2FkZXJcIjtcbmltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vcHJvamVjdFN0b3JhZ2VcIjtcblxuY29uc3QgbmV3UHJvamVjdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXdQcm9qZWN0QnV0dG9uJyk7XG5jb25zdCBwcm9qZWN0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3UHJvamVjdElucHV0Jyk7XG5jb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0TGlzdCcpO1xuXG5sZXQgYWN0aXZlUHJvamVjdEluZGV4ID0gMDtcblxubmV3UHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4geyAvL3dpbGwgbmVlZCB0byByZXdvcmsgdGhpcyB0byBhZGQgdG8gc3RvcmFnZSBhcnJheSByYXRoZXIgdGhhbiBkaXJlY3RseSB0byBET01cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHByb2plY3RJbnB1dC52YWx1ZSA9PSAnJyB8fCBudWxsKSByZXR1cm47XG4gICAgY2xlYXJFbGVtZW50KHByb2plY3RMaXN0KTtcbiAgICBhZGROZXdQcm9qZWN0KHByb2plY3RJbnB1dC52YWx1ZSk7XG4gICAgcGFnZUxvYWRlcigpO1xuICAgIHByb2plY3RJbnB1dC52YWx1ZSA9ICcnO1xufSlcblxuUHJvamVjdC5hZGROZXdQcm9qZWN0KCd0ZXN0IHByb2plY3QnLCAwKTtcblByb2plY3QuYWRkTmV3VG9kbygnVGVzdCB0b2RvJywgMCwgMCk7XG5Qcm9qZWN0LmFkZE5ld1RvZG8oJ2Fub3RoZXIgdGVzdCB0b2RvJywgMCwgMSk7XG5Qcm9qZWN0LmFkZE5ld1Byb2plY3QoJ3NlY29uZCB0ZXN0IHByb2plY3QnLCAxKTtcblByb2plY3QuYWRkTmV3VG9kbygnc2Vjb25kIHRlc3QgdG9kbycsIDEsIDApO1xuUHJvamVjdC5hZGROZXdUb2RvKCdZZXQgYW5vdGhlciB0aGluZyB0byBkbycsIDEsIDEpO1xuY29uc29sZS5sb2cocHJvamVjdHMpO1xuXG5cbnRvZG9MaXN0QnVpbGRlcigwKTtcbnBhZ2VMb2FkZXIoKTtcbiJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJwcm9qZWN0cyIsIlByb2plY3QiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwcm9qZWN0SW5kZXgiLCJ0aGlzIiwidG9kb3MiLCJhZGROZXdUb2RvIiwidGl0bGUiLCJ0b2RvSW5kZXgiLCJkdWVEYXRlIiwidG9kbyIsImNvbXBsZXRlZCIsInB1c2giLCJwcm9qZWN0RGVsZXRlciIsInNwbGljZSIsInRvZG9EYXRlRWRpdG9yIiwibmV3RGF0ZSIsInRvZG9EZWxldGVyIiwiYWRkTmV3UHJvamVjdCIsImNsZWFyRWxlbWVudCIsImVsZW1lbnQiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJlbGVtZW50QnVpbGRlciIsImNsYXNzTGlzdCIsInRleHRDb250ZW50IiwiZGF0YU5hbWUiLCJ4ZWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImZvckVhY2giLCJjbGFzc0xhYmVsIiwiYWRkIiwiZGF0YXNldCIsInRvZG9DYXJkQnVpbGRlciIsInRvZG9DYXJkIiwiY29tcGxldGUiLCJhZGRFdmVudExpc3RlbmVyIiwidG9kb1RpdGxlIiwidG9kb0RhdGVIb2xkZXIiLCJ0b2RvRHVlRGF0ZSIsImFwcGVuZCIsInRvZG9EdWVEYXRlUGlja2VyIiwic2V0QXR0cmlidXRlIiwiZSIsInByb2plY3RJRCIsInRhcmdldCIsInBhcmVudE5vZGUiLCJ0b2RvSUQiLCJuZXdEdWVEYXRlIiwiUHJvamVjdHMiLCJmb2N1cyIsInF1ZXJ5U2VsZWN0b3IiLCJwcm9qZWN0TGlzdENvbnRhaW5lciIsInBhZ2VMb2FkZXIiLCJpIiwibGVuZ3RoIiwibmV3UHJvamVjdENhcmQiLCJwcm9qZWN0TGlzdEJ1aWxkZXIiLCJuZXdQcm9qZWN0QnV0dG9uIiwicHJvamVjdElucHV0IiwicHJvamVjdExpc3QiLCJwcmV2ZW50RGVmYXVsdCIsImNvbnNvbGUiLCJsb2ciLCJhY3RpdmVQcm9qZWN0SW5kZXgiLCJuZXdUb2RvQ2FyZCIsInRvZG9MaXN0QnVpbGRlciJdLCJzb3VyY2VSb290IjoiIn0=