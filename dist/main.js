(()=>{"use strict";let e=[];class t{constructor(e,t){this.name=e,this.projectIndex=t,this.todos=[]}static addNewTodo(t,o,d=""){const n={title:t,projectIndex:o,completed:!1,dueDate:d};e[o].todos.push(n)}static projectDeleter(t){e.splice(t,1)}static addNewProject(o,d){e.push(new t(o,d))}markTodoCompleteToggle(e){this.todos[e].completed=!this.todos[e].completed}todoDateEditor(e,t){this.todos[e].dueDate=t}todoDeleter(e){this.todos.splice(e,1)}}let o=0;const d=document.querySelector(".projectList"),n=document.querySelector(".newProjectButton"),r=document.querySelector(".newProjectInput"),a=document.querySelector(".projectList"),c=document.querySelector(".todoList"),l=document.querySelector(".newTodoButton"),s=document.querySelector(".newTodoInput"),i=document.querySelector(".newTodoDate"),u=document.querySelector(".deleteComplete");function p(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function m(e,t,o,d){const n=document.createElement(e);return""!=t&&("object"==typeof t?t.forEach((e=>{n.classList.add(e)})):n.classList.add(t)),""!=o&&(n.value=o,n.textContent=o),""!=d&&(n.dataset.element=d),n}function v(e){let t=m("div","projectCard",e,"");return t.addEventListener("click",(e=>{var t;t=e.target.dataset.projectID,o=t,h(o)})),t}function h(t){p(c);for(let o=0;o<e[t].todos.length;o++){let d=f(e[t].todos[o].title,e[t].todos[o].dueDate);d.dataset.projectID=t,d.dataset.todoID=o,c.append(d)}}function f(t,d){let n=m("div","todoCard","",""),r=m("div","completeButton","","");r.addEventListener("click",(t=>{const d=t.target.parentNode.dataset.todoID;n.classList.toggle("complete"),""==r.textContent?r.textContent="x":r.textContent="",e[o].markTodoCompleteToggle(d),console.log(e)}));let a=m("h2","",t,""),c=m("div","dateHolder","",""),l=m("h3","","","");l.textContent=""==d?"No due date":`Due ${d}`,c.append(l);let s=m("input","","","");return s.setAttribute("type","date"),s.value=""==d?"":d,s.addEventListener("blur",(t=>{const o=t.target.parentNode.parentNode.dataset.projectID,d=t.target.parentNode.parentNode.dataset.todoID;let n=s.value;e[o].todoDateEditor(d,n),""!=n&&(l.textContent="",l.textContent=`Due ${n}`),c.removeChild(c.firstChild),c.append(l)})),l.addEventListener("click",(()=>{c.removeChild(c.firstChild),c.append(s),s.focus()})),n.append(r,a,c),n}function D(){!function(){p(d);for(let t=0;t<e.length;t++){let o=v(e[t].name);o.dataset.projectID=t,d.append(o)}}(),h(o)}n.addEventListener("click",(e=>{e.preventDefault(),""!=r.value&&(p(a),t.addNewProject(r.value),D(),r.value="")})),l.addEventListener("click",(e=>{e.preventDefault(),t.addNewTodo(s.value,o,i.value),D(),s.value="",i.value=""})),u.addEventListener("click",(t=>{t.preventDefault();for(let t=e[o].todos.length-1;t>=0;t--)1==e[o].todos[t].completed&&e[o].todoDeleter(t),D()})),t.addNewProject("test project",0),t.addNewTodo("Test todo",0),t.addNewTodo("another test todo",0),t.addNewProject("second test project",1),t.addNewTodo("second test todo",1),t.addNewTodo("Yet another thing to do",1),console.log(e),D()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,