(()=>{"use strict";let t=[];class e{constructor(t,e){this.name=t,this.projectIndex=e,this.todos=[]}static addNewTodo(e,o,d=""){const n={title:e,projectIndex:o,completed:!1,dueDate:d};t[o].todos.push(n)}static projectDeleter(e){t.splice(e,1)}static addNewProject(o,d){t.push(new e(o,d))}static markTodoCompleteToggle(e){t[e].completed=!t[e].completed}todoDateEditor(t,e){this.todos[t].dueDate=e}todoDeleter(t){this.todos.splice(t,1)}}let o=0;const d=document.querySelector(".projectList"),n=document.querySelector(".newProjectButton"),a=document.querySelector(".newProjectInput"),r=document.querySelector(".projectList"),c=document.querySelector(".todoList"),l=document.querySelector(".newTodoButton"),s=document.querySelector(".newTodoInput"),i=document.querySelector(".newTodoDate");function u(t){for(;t.firstChild;)t.removeChild(t.firstChild)}function p(t,e,o,d){const n=document.createElement(t);return""!=e&&("object"==typeof e?e.forEach((t=>{n.classList.add(t)})):n.classList.add(e)),""!=o&&(n.value=o,n.textContent=o),""!=d&&(n.dataset.element=d),n}function v(t){let e=p("div","projectCard",t,"");return e.addEventListener("click",(t=>{var e;e=t.target.dataset.projectID,o=e,m(o)})),e}function m(e){u(c);for(let o=0;o<t[e].todos.length;o++){let d=h(t[e].todos[o].title,t[e].todos[o].dueDate);d.dataset.projectID=e,d.dataset.todoID=o,c.append(d)}}function h(o,d){let n=p("div","todoCard","",""),a=p("div","completeButton","","");a.addEventListener("click",(t=>{const o=t.target.parentNode.dataset.todoID;n.classList.toggle("complete"),""==a.textContent?a.textContent="x":a.textContent="",e.markTodoCompleteToggle(o)}));let r=p("h2","",o,""),c=p("div","dateHolder","",""),l=p("h3","","","");l.textContent=""==d?"No due date":`Due ${d}`,c.append(l);let s=p("input","","","");return s.setAttribute("type","date"),s.value=""==d?"":d,s.addEventListener("blur",(e=>{const o=e.target.parentNode.parentNode.dataset.projectID,d=e.target.parentNode.parentNode.dataset.todoID;let n=s.value;t[o].todoDateEditor(d,n),""!=n&&(l.textContent="",l.textContent=`Due ${n}`),c.removeChild(c.firstChild),c.append(l)})),l.addEventListener("click",(()=>{c.removeChild(c.firstChild),c.append(s),s.focus()})),n.append(a,r,c),n}function f(){!function(){u(d);for(let e=0;e<t.length;e++){let o=v(t[e].name);o.dataset.projectID=e,d.append(o)}}(),m(o)}n.addEventListener("click",(t=>{t.preventDefault(),""!=a.value&&(u(r),e.addNewProject(a.value),f(),a.value="")})),l.addEventListener("click",(t=>{t.preventDefault(),e.addNewTodo(s.value,o,i.value),f(),s.value="",i.value=""})),e.addNewProject("test project",0),e.addNewTodo("Test todo",0),e.addNewTodo("another test todo",0),e.addNewProject("second test project",1),e.addNewTodo("second test todo",1),e.addNewTodo("Yet another thing to do",1),console.log(t),f()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,