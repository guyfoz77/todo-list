(()=>{"use strict";let e=[];class t{constructor(e,t){this.name=e,this.projectIndex=t,this.todos=[]}static addNewTodo(t,o,d=""){const a={title:t,projectIndex:o,completed:!1,dueDate:d};e[o].todos.push(a)}static projectDeleter(t){e.splice(t,1)}static addNewProject(o,d){e.push(new t(o,d))}markTodoCompleteToggle(e){this.todos[e].completed=!this.todos[e].completed}todoDateEditor(e,t){this.todos[e].dueDate=t}todoDeleter(e){this.todos.splice(e,1)}}let o=0;const d=document.querySelector(".projectList"),a=document.querySelector(".newProjectButton"),n=document.querySelector(".newProjectInput"),c=document.querySelector(".projectList"),r=document.querySelector(".todoList"),l=document.querySelector(".newTodoButton"),s=document.querySelector(".newTodoInput"),i=document.querySelector(".newTodoDate"),u=document.querySelector(".deleteComplete");function p(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function m(e,t,o,d){const a=document.createElement(e);return""!=t&&("object"==typeof t?t.forEach((e=>{a.classList.add(e)})):a.classList.add(t)),""!=o&&(a.value=o,a.textContent=o),""!=d&&(a.dataset.element=d),a}function v(e){let t=m("div","projectCard",e,"");return t.addEventListener("click",(e=>{var t;t=e.target.dataset.projectID,o=t,h(o)})),t}function h(t){p(r);for(let o=0;o<e[t].todos.length;o++){let d=f(e[t].todos[o].title,e[t].todos[o].dueDatem,e[t].todos[o].completed);d.dataset.projectID=t,d.dataset.todoID=o,r.append(d)}}function f(t,d,a){let n=m("div","todoCard","",""),c=m("div",["completeButton","material-symbols-outlined"],"","");c.addEventListener("click",(t=>{const d=t.target.parentNode.dataset.todoID;n.classList.toggle("complete"),c.classList.toggle("selected"),e[o].markTodoCompleteToggle(d)})),1==a&&(n.classList.add("complete"),c.classList.add("selected"),cancelAnimationFrame());let r=m("h2","",t,""),l=m("div","dateHolder","",""),s=m("h3","","","");s.textContent=""==d?"No due date":`Due ${d}`,l.append(s);let i=m("input","","","");return i.setAttribute("type","date"),i.value=""==d?"":d,i.addEventListener("blur",(t=>{const o=t.target.parentNode.parentNode.dataset.projectID,d=t.target.parentNode.parentNode.dataset.todoID;let a=i.value;e[o].todoDateEditor(d,a),""!=a&&(s.textContent="",s.textContent=`Due ${a}`),l.removeChild(l.firstChild),l.append(s)})),s.addEventListener("click",(()=>{l.removeChild(l.firstChild),l.append(i),i.focus()})),n.append(c,r,l),n}function D(){!function(){p(d);for(let t=0;t<e.length;t++){let o=v(e[t].name);o.dataset.projectID=t,d.append(o)}}(),h(o)}a.addEventListener("click",(e=>{e.preventDefault(),""!=n.value&&(p(c),t.addNewProject(n.value),D(),n.value="")})),l.addEventListener("click",(e=>{e.preventDefault(),t.addNewTodo(s.value,o,i.value),D(),s.value="",i.value=""})),u.addEventListener("click",(t=>{t.preventDefault();for(let t=e[o].todos.length-1;t>=0;t--)1==e[o].todos[t].completed&&e[o].todoDeleter(t),D()})),t.addNewProject("test project",0),t.addNewTodo("Test todo",0),t.addNewTodo("another test todo",0),t.addNewProject("second test project",1),t.addNewTodo("second test todo",1),t.addNewTodo("Yet another thing to do",1),console.log(e),D()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Olsid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9wcm9qZWN0U3RvcmFnZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcHJvamVjdE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2RvbUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3BhZ2VMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgcHJvamVjdHMgPSBbXTsiLCJpbXBvcnQgeyBwcm9qZWN0cyB9IGZyb20gXCIuL3Byb2plY3RTdG9yYWdlXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBwcm9qZWN0SW5kZXgpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5wcm9qZWN0SW5kZXggPSBwcm9qZWN0SW5kZXg7XG4gICAgICAgIHRoaXMudG9kb3MgPSBbXTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkTmV3VG9kbyh0aXRsZSwgcHJvamVjdEluZGV4LCBkdWVEYXRlID0gJycpIHtcbiAgICAgICAgY29uc3QgdG9kbyA9IHtcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgIHByb2plY3RJbmRleDogcHJvamVjdEluZGV4LFxuICAgICAgICAgICAgLy8gdG9kb0luZGV4OiB0b2RvSW5kZXgsXG4gICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZHVlRGF0ZTogZHVlRGF0ZVxuICAgICAgICB9XG4gICAgICAgIHByb2plY3RzW3Byb2plY3RJbmRleF0udG9kb3MucHVzaCh0b2RvKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJvamVjdERlbGV0ZXIocHJvamVjdEluZGV4KSB7XG4gICAgICAgIHByb2plY3RzLnNwbGljZShwcm9qZWN0SW5kZXgsIDEpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGROZXdQcm9qZWN0KG5hbWUsIHByb2plY3RJbmRleCkge1xuICAgICAgICBwcm9qZWN0cy5wdXNoKG5ldyBQcm9qZWN0KG5hbWUsIHByb2plY3RJbmRleCkpO1xuICAgIH1cblxuICAgIG1hcmtUb2RvQ29tcGxldGVUb2dnbGUodG9kb0luZGV4KSB7XG4gICAgICAgIHRoaXMudG9kb3NbdG9kb0luZGV4XS5jb21wbGV0ZWQgPSAhdGhpcy50b2Rvc1t0b2RvSW5kZXhdLmNvbXBsZXRlZDtcbiAgICB9XG5cbiAgICB0b2RvRGF0ZUVkaXRvcih0b2RvSW5kZXgsIG5ld0RhdGUpIHtcbiAgICAgICAgdGhpcy50b2Rvc1t0b2RvSW5kZXhdLmR1ZURhdGUgPSBuZXdEYXRlO1xuICAgIH1cblxuICAgIHRvZG9EZWxldGVyKHRvZG9JbmRleCkge1xuICAgICAgICB0aGlzLnRvZG9zLnNwbGljZSh0b2RvSW5kZXgsIDEpO1xuICAgIH1cbn1cblxuLy8gZnVuY3Rpb24gcHJvamVjdEJ1aWxkZXIobmFtZSwgcHJvamVjdEluZGV4KSB7IC8vZmFjdG9yeSBmdW5jdGlvbiB0byBidWlsZCBuZXcgcHJvamVjdCBvYmplY3QuXG4vLyAgICAgbGV0IHRvZG9zID0gW107XG4vLyAgICAgZnVuY3Rpb24gdG9kb0RhdGVFZGl0b3IodG9kb0luZGV4LCBuZXdEYXRlKSB7XG4vLyAgICAgICAgIHRoaXMudG9kb3NbdG9kb0luZGV4XS5kdWVEYXRlID0gbmV3RGF0ZTtcbi8vICAgICB9XG4vLyAgICAgZnVuY3Rpb24gdG9kb0RlbGV0ZXIodG9kb0lEKXtcbi8vICAgICAgICAgdGhpcy50b2Rvcy5zcGxpY2UodG9kb0lELCAxKTtcbi8vICAgICB9XG4vLyAgICAgcmV0dXJuIHtcbi8vICAgICAgICAgbmFtZTogbmFtZSxcbi8vICAgICAgICAgcHJvamVjdEluZGV4OiBwcm9qZWN0SW5kZXgsXG4vLyAgICAgICAgIHRvZG9zOiB0b2Rvcyxcbi8vICAgICAgICAgdG9kb0RhdGVFZGl0b3I6IHRvZG9EYXRlRWRpdG9yLFxuLy8gICAgICAgICB0b2RvRGVsZXRlcjogdG9kb0RlbGV0ZXJcbi8vICAgICB9XG4vLyB9XG4vLyBmdW5jdGlvbiB0b2RvQnVpbGRlcih0aXRsZSwgcHJvamVjdEluZGV4LCB0b2RvSW5kZXgsIGR1ZURhdGUgPSAnTm8gZHVlIGRhdGUuJykgeyAvL3Byb2plY3RJbmRleCByZWZlcnMgdG8gdGhlIHBvc2l0aW9uIG9mIHRoZSBwYXJlbnQgcHJvamVjdCBpbiB0aGUgYXJyYXkgb2YgcHJvamVjdHMuXG4vLyAgICAgcmV0dXJuIHtcbi8vICAgICAgICAgdGl0bGU6IHRpdGxlLFxuLy8gICAgICAgICBwcm9qZWN0SW5kZXg6IHByb2plY3RJbmRleCxcbi8vICAgICAgICAgdG9kb0luZGV4OiB0b2RvSW5kZXgsXG4vLyAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4vLyAgICAgICAgIGR1ZURhdGU6IGR1ZURhdGVcbi8vICAgICB9XG4vLyB9XG4vLyBleHBvcnQgZnVuY3Rpb24gcHJvamVjdERlbGV0ZXIocHJvamVjdEluZGV4KSB7XG4vLyAgICAgUHJvamVjdC5wcm9qZWN0cy5zcGxpY2UocHJvamVjdEluZGV4LCAxKTtcbi8vIH1cblxuLy8gZXhwb3J0IGZ1bmN0aW9uIGFkZE5ld1Byb2plY3QobmFtZSwgcHJvamVjdEluZGV4KSB7XG4vLyAgICAgcHJvamVjdHMucHVzaChuZXcgUHJvamVjdChuYW1lLCBwcm9qZWN0SW5kZXgpKTtcbi8vIH1cbi8vIGV4cG9ydCBmdW5jdGlvbiBhZGROZXdUb2RvKHRpdGxlLCBwcm9qZWN0SW5kZXgsIHRvZG9JbmRleCwgZHVlRGF0ZSA9ICdObyBkdWUgZGF0ZS4nKSB7XG4vLyAgICAgUHJvamVjdC5wcm9qZWN0c1twcm9qZWN0SW5kZXhdLnRvZG9zLnB1c2godG9kb0J1aWxkZXIodGl0bGUsIHByb2plY3RJbmRleCwgdG9kb0luZGV4LCBkdWVEYXRlKSk7XG4vLyB9IiwiaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuL3Byb2plY3RNYW5hZ2VyXCI7XG5pbXBvcnQgeyBwcm9qZWN0cyB9IGZyb20gXCIuL3Byb2plY3RTdG9yYWdlXCI7XG5pbXBvcnQgeyBwYWdlTG9hZGVyIH0gZnJvbSBcIi4vcGFnZUxvYWRlclwiO1xuXG5leHBvcnQgbGV0IGFjdGl2ZVByb2plY3RJbmRleCA9IDA7XG5cbmNvbnN0IHByb2plY3RMaXN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RMaXN0Jyk7XG5jb25zdCBuZXdQcm9qZWN0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld1Byb2plY3RCdXR0b24nKTtcbiAgICBjb25zdCBwcm9qZWN0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3UHJvamVjdElucHV0Jyk7XG5jb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0TGlzdCcpO1xuY29uc3QgdG9kb0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvTGlzdCcpO1xuY29uc3QgbmV3VG9kb0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXdUb2RvQnV0dG9uJyk7XG4gICAgY29uc3QgbmV3VG9kb0lucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld1RvZG9JbnB1dCcpO1xuICAgIGNvbnN0IG5ld1RvZG9EYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld1RvZG9EYXRlJyk7XG5jb25zdCBkZWxldGVBbGxDb21wbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZWxldGVDb21wbGV0ZScpO1xuXG5uZXdQcm9qZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7IC8vd2lsbCBuZWVkIHRvIHJld29yayB0aGlzIHRvIGFkZCB0byBzdG9yYWdlIGFycmF5IHJhdGhlciB0aGFuIGRpcmVjdGx5IHRvIERPTVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAocHJvamVjdElucHV0LnZhbHVlID09ICcnIHx8IG51bGwpIHJldHVybjtcbiAgICBjbGVhckVsZW1lbnQocHJvamVjdExpc3QpO1xuICAgIFByb2plY3QuYWRkTmV3UHJvamVjdChwcm9qZWN0SW5wdXQudmFsdWUpO1xuICAgIHBhZ2VMb2FkZXIoKTtcbiAgICBwcm9qZWN0SW5wdXQudmFsdWUgPSAnJztcbn0pXG5uZXdUb2RvQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIFByb2plY3QuYWRkTmV3VG9kbyhuZXdUb2RvSW5wdXQudmFsdWUsIGFjdGl2ZVByb2plY3RJbmRleCwgbmV3VG9kb0RhdGUudmFsdWUpO1xuICAgIHBhZ2VMb2FkZXIoKTtcbiAgICBuZXdUb2RvSW5wdXQudmFsdWUgPSAnJztcbiAgICBuZXdUb2RvRGF0ZS52YWx1ZSA9ICcnO1xufSlcbmRlbGV0ZUFsbENvbXBsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGZvciAobGV0IGkgPSBwcm9qZWN0c1thY3RpdmVQcm9qZWN0SW5kZXhdLnRvZG9zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChwcm9qZWN0c1thY3RpdmVQcm9qZWN0SW5kZXhdLnRvZG9zW2ldLmNvbXBsZXRlZCA9PSB0cnVlKSB7XG4gICAgICAgICAgICBwcm9qZWN0c1thY3RpdmVQcm9qZWN0SW5kZXhdLnRvZG9EZWxldGVyKGkpO1xuICAgICAgICB9XG4gICAgICAgIHBhZ2VMb2FkZXIoKTtcbiAgICB9XG59KVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckVsZW1lbnQoZWxlbWVudCkge1xuICAgIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRCdWlsZGVyKGVsZW1lbnQsIGNsYXNzTGlzdCwgdGV4dENvbnRlbnQsIGRhdGFOYW1lKSB7ICAvL2VsZW1lbnQgYnVpbGRlciBjb3BpZWQgYW5kIG1vZGlmaWVkIGZyb20gcHJldmlvdXMgcHJvamVjdC5cbiAgICBjb25zdCB4ZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgaWYgKGNsYXNzTGlzdCAhPSAnJykge1xuICAgICAgICBpZiAodHlwZW9mIGNsYXNzTGlzdCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY2xhc3NMaXN0LmZvckVhY2goY2xhc3NMYWJlbCA9PiB7XG4gICAgICAgICAgICAgICAgeGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc0xhYmVsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgeGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc0xpc3QpO1xuICAgIH1cbiAgICBpZiAodGV4dENvbnRlbnQgIT0gJycpIHtcbiAgICAgICAgeGVsZW1lbnQudmFsdWUgPSB0ZXh0Q29udGVudDtcbiAgICAgICAgeGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcbiAgICB9XG4gICAgaWYgKGRhdGFOYW1lICE9ICcnKSB4ZWxlbWVudC5kYXRhc2V0LmVsZW1lbnQgPSBkYXRhTmFtZTtcbiAgICByZXR1cm4geGVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHByb2plY3RDYXJkQnVpbGRlcihuYW1lKSB7XG4gICAgbGV0IHByb2plY3RDYXJkID0gZWxlbWVudEJ1aWxkZXIoJ2RpdicsICdwcm9qZWN0Q2FyZCcsIG5hbWUsICcnKTtcbiAgICBwcm9qZWN0Q2FyZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICBhY3RpdmVQcm9qZWN0U3dpdGNoZXIoZS50YXJnZXQuZGF0YXNldC5wcm9qZWN0SUQpO1xuICAgIH0pXG4gICAgcmV0dXJuIHByb2plY3RDYXJkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdExpc3RCdWlsZGVyKCkge1xuICAgIGNsZWFyRWxlbWVudChwcm9qZWN0TGlzdENvbnRhaW5lcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbmV3UHJvamVjdENhcmQgPSBwcm9qZWN0Q2FyZEJ1aWxkZXIocHJvamVjdHNbaV0ubmFtZSk7XG4gICAgICAgIG5ld1Byb2plY3RDYXJkLmRhdGFzZXQucHJvamVjdElEID0gaTtcbiAgICAgICAgcHJvamVjdExpc3RDb250YWluZXIuYXBwZW5kKG5ld1Byb2plY3RDYXJkKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFjdGl2ZVByb2plY3RTd2l0Y2hlcihuZXdQcm9qZWN0SW5kZXgpIHtcbiAgICBhY3RpdmVQcm9qZWN0SW5kZXggPSBuZXdQcm9qZWN0SW5kZXg7XG4gICAgdG9kb0xpc3RCdWlsZGVyKGFjdGl2ZVByb2plY3RJbmRleCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2RvTGlzdEJ1aWxkZXIoYWN0aXZlUHJvamVjdEluZGV4KSB7XG4gICAgY2xlYXJFbGVtZW50KHRvZG9Db250YWluZXIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvamVjdHNbYWN0aXZlUHJvamVjdEluZGV4XS50b2Rvcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbmV3VG9kb0NhcmQgPSB0b2RvQ2FyZEJ1aWxkZXIocHJvamVjdHNbYWN0aXZlUHJvamVjdEluZGV4XS50b2Rvc1tpXS50aXRsZSwgcHJvamVjdHNbYWN0aXZlUHJvamVjdEluZGV4XS50b2Rvc1tpXS5kdWVEYXRlbSwgcHJvamVjdHNbYWN0aXZlUHJvamVjdEluZGV4XS50b2Rvc1tpXS5jb21wbGV0ZWQpO1xuICAgICAgICBuZXdUb2RvQ2FyZC5kYXRhc2V0LnByb2plY3RJRCA9IGFjdGl2ZVByb2plY3RJbmRleDtcbiAgICAgICAgbmV3VG9kb0NhcmQuZGF0YXNldC50b2RvSUQgPSBpO1xuICAgICAgICB0b2RvQ29udGFpbmVyLmFwcGVuZChuZXdUb2RvQ2FyZCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9kb0NhcmRCdWlsZGVyKHRpdGxlLCBkdWVEYXRlLCBjb21wbGV0ZWQpIHsgXG4gICAgbGV0IHRvZG9DYXJkID0gZWxlbWVudEJ1aWxkZXIoJ2RpdicsICd0b2RvQ2FyZCcsICcnLCAnJyk7XG4gICAgbGV0IGNvbXBsZXRlID0gZWxlbWVudEJ1aWxkZXIoJ2RpdicsIFsnY29tcGxldGVCdXR0b24nLCAnbWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCddLCAnJywgJycpO1xuICAgICAgICBjb21wbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2RvSUQgPSBlLnRhcmdldC5wYXJlbnROb2RlLmRhdGFzZXQudG9kb0lEO1xuICAgICAgICAgICAgdG9kb0NhcmQuY2xhc3NMaXN0LnRvZ2dsZSgnY29tcGxldGUnKTtcbiAgICAgICAgICAgIGNvbXBsZXRlLmNsYXNzTGlzdC50b2dnbGUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAvLyBpZiAoY29tcGxldGUudGV4dENvbnRlbnQgPT0gJycpIGNvbXBsZXRlLnRleHRDb250ZW50ID0gJyc7IGVsc2UgY29tcGxldGUudGV4dENvbnRlbnQgPSAnJztcbiAgICAgICAgICAgIHByb2plY3RzW2FjdGl2ZVByb2plY3RJbmRleF0ubWFya1RvZG9Db21wbGV0ZVRvZ2dsZSh0b2RvSUQpO1xuICAgICAgICB9KVxuICAgICAgICBpZiAoY29tcGxldGVkID09IHRydWUpIHtcbiAgICAgICAgICAgIHRvZG9DYXJkLmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlJyk7XG4gICAgICAgICAgICBjb21wbGV0ZS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoKTtcbiAgICAgICAgfVxuICAgIGxldCB0b2RvVGl0bGUgPSBlbGVtZW50QnVpbGRlcignaDInLCAnJywgdGl0bGUsICcnKTtcbiAgICBsZXQgdG9kb0RhdGVIb2xkZXIgPSBlbGVtZW50QnVpbGRlcignZGl2JywgJ2RhdGVIb2xkZXInLCAnJywgJycpO1xuICAgIGxldCB0b2RvRHVlRGF0ZSA9IGVsZW1lbnRCdWlsZGVyKCdoMycsICcnLCAnJywgJycpO1xuICAgICAgICBpZiAoZHVlRGF0ZSA9PSAnJykgdG9kb0R1ZURhdGUudGV4dENvbnRlbnQgPSAnTm8gZHVlIGRhdGUnOyBlbHNlIHRvZG9EdWVEYXRlLnRleHRDb250ZW50ID0gYER1ZSAke2R1ZURhdGV9YDtcbiAgICB0b2RvRGF0ZUhvbGRlci5hcHBlbmQodG9kb0R1ZURhdGUpO1xuICAgIGxldCB0b2RvRHVlRGF0ZVBpY2tlciA9IGVsZW1lbnRCdWlsZGVyKCdpbnB1dCcsICcnLCAnJywgJycpO1xuICAgICAgICB0b2RvRHVlRGF0ZVBpY2tlci5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiZGF0ZVwiKTtcbiAgICAgICAgaWYgKGR1ZURhdGUgPT0gJycpIHRvZG9EdWVEYXRlUGlja2VyLnZhbHVlID0gJyc7IGVsc2UgdG9kb0R1ZURhdGVQaWNrZXIudmFsdWUgPSBkdWVEYXRlO1xuICAgICAgICAgICAgdG9kb0R1ZURhdGVQaWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdElEID0gZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLmRhdGFzZXQucHJvamVjdElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvZG9JRCA9IGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5kYXRhc2V0LnRvZG9JRDtcbiAgICAgICAgICAgICAgICBsZXQgbmV3RHVlRGF0ZSA9IHRvZG9EdWVEYXRlUGlja2VyLnZhbHVlO1xuICAgICAgICAgICAgICAgIHByb2plY3RzW3Byb2plY3RJRF0udG9kb0RhdGVFZGl0b3IodG9kb0lELCBuZXdEdWVEYXRlKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3RHVlRGF0ZSAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICB0b2RvRHVlRGF0ZS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB0b2RvRHVlRGF0ZS50ZXh0Q29udGVudCA9IGBEdWUgJHtuZXdEdWVEYXRlfWBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRvZG9EYXRlSG9sZGVyLnJlbW92ZUNoaWxkKHRvZG9EYXRlSG9sZGVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIHRvZG9EYXRlSG9sZGVyLmFwcGVuZCh0b2RvRHVlRGF0ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB0b2RvRHVlRGF0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRvZG9EYXRlSG9sZGVyLnJlbW92ZUNoaWxkKHRvZG9EYXRlSG9sZGVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgdG9kb0RhdGVIb2xkZXIuYXBwZW5kKHRvZG9EdWVEYXRlUGlja2VyKTtcbiAgICAgICAgICAgIHRvZG9EdWVEYXRlUGlja2VyLmZvY3VzKCk7XG4gICAgICAgIH0pXG4gICAgICAgIFxuXG4gICAgdG9kb0NhcmQuYXBwZW5kKGNvbXBsZXRlLCB0b2RvVGl0bGUsIHRvZG9EYXRlSG9sZGVyKTtcbiAgICByZXR1cm4gdG9kb0NhcmQ7XG59XG4iLCJcbmltcG9ydCB7IHRvZG9MaXN0QnVpbGRlciwgcHJvamVjdExpc3RCdWlsZGVyIH0gZnJvbSBcIi4vZG9tQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgYWN0aXZlUHJvamVjdEluZGV4IH0gZnJvbSBcIi4vZG9tQ29udHJvbGxlclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFnZUxvYWRlcigpIHtcbiAgICBwcm9qZWN0TGlzdEJ1aWxkZXIoKTtcbiAgICB0b2RvTGlzdEJ1aWxkZXIoYWN0aXZlUHJvamVjdEluZGV4KTtcbn0iLCJpbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSBcIi4vcHJvamVjdE1hbmFnZXJcIjtcbmltcG9ydCB7IHBhZ2VMb2FkZXIgfSBmcm9tIFwiLi9wYWdlTG9hZGVyXCI7XG5pbXBvcnQgeyBwcm9qZWN0cyB9IGZyb20gXCIuL3Byb2plY3RTdG9yYWdlXCI7XG5cblByb2plY3QuYWRkTmV3UHJvamVjdCgndGVzdCBwcm9qZWN0JywgMCk7XG5Qcm9qZWN0LmFkZE5ld1RvZG8oJ1Rlc3QgdG9kbycsIDApO1xuUHJvamVjdC5hZGROZXdUb2RvKCdhbm90aGVyIHRlc3QgdG9kbycsIDApO1xuUHJvamVjdC5hZGROZXdQcm9qZWN0KCdzZWNvbmQgdGVzdCBwcm9qZWN0JywgMSk7XG5Qcm9qZWN0LmFkZE5ld1RvZG8oJ3NlY29uZCB0ZXN0IHRvZG8nLCAxKTtcblByb2plY3QuYWRkTmV3VG9kbygnWWV0IGFub3RoZXIgdGhpbmcgdG8gZG8nLCAxKTtcbmNvbnNvbGUubG9nKHByb2plY3RzKTtcblxuXG5cbnBhZ2VMb2FkZXIoKTtcbiJdLCJuYW1lcyI6WyJwcm9qZWN0cyIsIlByb2plY3QiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwcm9qZWN0SW5kZXgiLCJ0aGlzIiwidG9kb3MiLCJhZGROZXdUb2RvIiwidGl0bGUiLCJkdWVEYXRlIiwidG9kbyIsImNvbXBsZXRlZCIsInB1c2giLCJwcm9qZWN0RGVsZXRlciIsInNwbGljZSIsImFkZE5ld1Byb2plY3QiLCJtYXJrVG9kb0NvbXBsZXRlVG9nZ2xlIiwidG9kb0luZGV4IiwidG9kb0RhdGVFZGl0b3IiLCJuZXdEYXRlIiwidG9kb0RlbGV0ZXIiLCJhY3RpdmVQcm9qZWN0SW5kZXgiLCJwcm9qZWN0TGlzdENvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm5ld1Byb2plY3RCdXR0b24iLCJwcm9qZWN0SW5wdXQiLCJwcm9qZWN0TGlzdCIsInRvZG9Db250YWluZXIiLCJuZXdUb2RvQnV0dG9uIiwibmV3VG9kb0lucHV0IiwibmV3VG9kb0RhdGUiLCJkZWxldGVBbGxDb21wbGV0ZUJ1dHRvbiIsImNsZWFyRWxlbWVudCIsImVsZW1lbnQiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJlbGVtZW50QnVpbGRlciIsImNsYXNzTGlzdCIsInRleHRDb250ZW50IiwiZGF0YU5hbWUiLCJ4ZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJmb3JFYWNoIiwiY2xhc3NMYWJlbCIsImFkZCIsInZhbHVlIiwiZGF0YXNldCIsInByb2plY3RDYXJkQnVpbGRlciIsInByb2plY3RDYXJkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJuZXdQcm9qZWN0SW5kZXgiLCJ0YXJnZXQiLCJwcm9qZWN0SUQiLCJ0b2RvTGlzdEJ1aWxkZXIiLCJpIiwibGVuZ3RoIiwibmV3VG9kb0NhcmQiLCJ0b2RvQ2FyZEJ1aWxkZXIiLCJkdWVEYXRlbSIsInRvZG9JRCIsImFwcGVuZCIsInRvZG9DYXJkIiwiY29tcGxldGUiLCJwYXJlbnROb2RlIiwidG9nZ2xlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ0b2RvVGl0bGUiLCJ0b2RvRGF0ZUhvbGRlciIsInRvZG9EdWVEYXRlIiwidG9kb0R1ZURhdGVQaWNrZXIiLCJzZXRBdHRyaWJ1dGUiLCJuZXdEdWVEYXRlIiwiZm9jdXMiLCJwYWdlTG9hZGVyIiwibmV3UHJvamVjdENhcmQiLCJwcm9qZWN0TGlzdEJ1aWxkZXIiLCJwcmV2ZW50RGVmYXVsdCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9