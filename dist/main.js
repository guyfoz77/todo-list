(()=>{"use strict";let e=[{name:"Test Project",todos:[{title:"Test todo",dueDate:null}]}];function t(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function o(e,t,o,n){const c=document.createElement(e);return""!=t&&("object"==typeof t?t.forEach((e=>{c.classList.add(e)})):c.classList.add(t)),""!=o&&(c.value=o,c.textContent=o),""!=n&&(c.dataset.element=n),c}const n=document.querySelector(".projectList");function c(){!function(){t(n);for(let t=0;t<e.length;t++)n.append(o("div","projectCard",e[t].name,""))}()}document.querySelector(".todoContainer");const r=document.querySelector(".newProjectButton"),u=document.querySelector(".newProjectInput"),l=document.querySelector(".projectList");r.addEventListener("click",(o=>{var n;o.preventDefault(),""!=u.value&&(t(l),n=u.value,e.push({name:n,todos:[]}),c(),u.value="",console.log(e))})),c()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQU8sSUFBSUEsRUFBVyxDQUNsQixDQUNJQyxLQUFNLGVBQ05DLE1BQU8sQ0FDSCxDQUNJQyxNQUFPLFlBQ1BDLFFBQVMsU0NMbEIsU0FBU0MsRUFBYUMsR0FDekIsS0FBT0EsRUFBUUMsWUFDWEQsRUFBUUUsWUFBWUYsRUFBUUMsV0FFcEMsQ0FFQSxTQUFTRSxFQUFlSCxFQUFTSSxFQUFXQyxFQUFhQyxHQUNyRCxNQUFNQyxFQUFXQyxTQUFTQyxjQUFjVCxHQWF4QyxNQVppQixJQUFiSSxJQUN3QixpQkFBYkEsRUFDUEEsRUFBVU0sU0FBUUMsSUFDZEosRUFBU0gsVUFBVVEsSUFBSUQsRUFBVyxJQUVuQ0osRUFBU0gsVUFBVVEsSUFBSVIsSUFFZixJQUFmQyxJQUNBRSxFQUFTTSxNQUFRUixFQUNqQkUsRUFBU0YsWUFBY0EsR0FFWCxJQUFaQyxJQUFnQkMsRUFBU08sUUFBUWQsUUFBVU0sR0FDeENDLENBQ1gsQ0NuQkEsTUFBTVEsRUFBdUJQLFNBQVNRLGNBQWMsZ0JBVTdDLFNBQVNDLEtBUGhCLFdBQ0lsQixFQUFhZ0IsR0FDYixJQUFLLElBQUlHLEVBQUksRUFBR0EsRUFBSXhCLEVBQVN5QixPQUFRRCxJQUNqQ0gsRUFBcUJLLE9EZ0JQakIsRUFBZSxNQUFPLGNDaEJXVCxFQUFTd0IsR0FBR3ZCLEtEZ0JGLElDZGpFLENBR0kwQixFQUNKLENBWHNCYixTQUFTUSxjQUFjLGtCQ0E3QyxNQUFNTSxFQUFtQmQsU0FBU1EsY0FBYyxxQkFDMUNPLEVBQWVmLFNBQVNRLGNBQWMsb0JBQ3RDUSxFQUFjaEIsU0FBU1EsY0FBYyxnQkFFM0NNLEVBQWlCRyxpQkFBaUIsU0FBU0MsSUhJcEMsSUFBdUIvQixFR0gxQitCLEVBQUVDLGlCQUN3QixJQUF0QkosRUFBYVYsUUFDakJkLEVBQWF5QixHSENhN0IsRUdBWjRCLEVBQWFWLE1IQzNCbkIsRUFBU2tDLEtBQUssQ0FDVmpDLEtBQU1BLEVBQ05DLE1BQU8sS0dGWHFCLElBQ0FNLEVBQWFWLE1BQVEsR0FDckJnQixRQUFRQyxJQUFJcEMsR0FBUyxJQUd6QnVCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcHJvamVjdE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2RvbUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3BhZ2VMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgcHJvamVjdHMgPSBbXG4gICAge1xuICAgICAgICBuYW1lOiAnVGVzdCBQcm9qZWN0JyxcbiAgICAgICAgdG9kb3M6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1Rlc3QgdG9kbycsXG4gICAgICAgICAgICAgICAgZHVlRGF0ZTogbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfVxuXVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkTmV3UHJvamVjdChuYW1lKSB7XG4gICAgcHJvamVjdHMucHVzaCh7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHRvZG9zOiBbXVxuICAgIH0pXG59IiwiXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRCdWlsZGVyKGVsZW1lbnQsIGNsYXNzTGlzdCwgdGV4dENvbnRlbnQsIGRhdGFOYW1lKSB7ICAvL2VsZW1lbnQgYnVpbGRlciBjb3BpZWQgYW5kIG1vZGlmaWVkIGZyb20gcHJldmlvdXMgcHJvamVjdC5cbiAgICBjb25zdCB4ZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgaWYgKGNsYXNzTGlzdCAhPSAnJykge1xuICAgICAgICBpZiAodHlwZW9mIGNsYXNzTGlzdCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY2xhc3NMaXN0LmZvckVhY2goY2xhc3NMYWJlbCA9PiB7XG4gICAgICAgICAgICAgICAgeGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc0xhYmVsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgeGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc0xpc3QpO1xuICAgIH1cbiAgICBpZiAodGV4dENvbnRlbnQgIT0gJycpIHtcbiAgICAgICAgeGVsZW1lbnQudmFsdWUgPSB0ZXh0Q29udGVudDtcbiAgICAgICAgeGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcbiAgICB9XG4gICAgaWYgKGRhdGFOYW1lICE9ICcnKSB4ZWxlbWVudC5kYXRhc2V0LmVsZW1lbnQgPSBkYXRhTmFtZTtcbiAgICByZXR1cm4geGVsZW1lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0Q2FyZEJ1aWxkZXIobmFtZSkge1xuICAgIGxldCBwcm9qZWN0Q2FyZCA9IGVsZW1lbnRCdWlsZGVyKCdkaXYnLCAncHJvamVjdENhcmQnLCBuYW1lLCAnJyk7XG4gICAgcmV0dXJuIHByb2plY3RDYXJkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9kb0NhcmRCdWlsZGVyKHRpdGxlLCBpZCwgZHVlRGF0ZSA9ICdObyBkdWUgZGF0ZScpIHsgLy9pZCB3aWxsIGJlIHRoZSBwb3NpdGlvbiBvZiB0aGUgdG9kbyBpbiB0aGUgc3RvcmFnZSBhcnJheS5cbiAgICBsZXQgdG9kb0NhcmQgPSBlbGVtZW50QnVpbGRlcignZGl2JywgJ3RvZG9DYXJkJywgJycsIGlkKTtcbiAgICBsZXQgY29tcGxldGUgPSBlbGVtZW50QnVpbGRlcignZGl2JywgJ2NvbXBsZXRlJywgJycsICcnKTtcbiAgICAgICAgY29tcGxldGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0b2RvQ2FyZC5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZScpO1xuICAgICAgICB9KVxuICAgIGxldCB0b2RvVGl0bGUgPSBlbGVtZW50QnVpbGRlcignaDInLCAnJywgdGl0bGUsICcnKTtcbiAgICBsZXQgdG9kb0R1ZURhdGUgPSBlbGVtZW50QnVpbGRlcignaDMnLCAnJywgZHVlRGF0ZSwgJycpO1xuICAgICAgICB0b2RvRHVlRGF0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICAvL2NvZGUgaGVyZSB0byBsb2FkIGEgZGF0ZSBwaWNrZXIgd2hpY2ggY2FuIGFsbG93IHRoZSB1c2VyIHRvIGVkaXQgdGhlIGRhdGUgb24gdGhlIHRvZG8uXG4gICAgICAgIH0pXG4gICAgdG9kb0NhcmQuYXBwZW5kKGNvbXBsZXRlLCB0b2RvVGl0bGUsIHRvZG9EdWVEYXRlKTtcbiAgICByZXR1cm4gdG9kb0NhcmQ7XG59XG4iLCJpbXBvcnQgeyBwcm9qZWN0cyB9IGZyb20gXCIuL3Byb2plY3RNYW5hZ2VyXCI7XG5pbXBvcnQgeyBlbGVtZW50QnVpbGRlciwgcHJvamVjdENhcmRCdWlsZGVyLCB0b2RvQ2FyZEJ1aWxkZXIsIGNsZWFyRWxlbWVudCB9IGZyb20gXCIuL2RvbUNvbnRyb2xsZXJcIjtcblxuY29uc3QgcHJvamVjdExpc3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdExpc3QnKTtcbmNvbnN0IHRvZG9Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kb0NvbnRhaW5lcicpO1xuXG5mdW5jdGlvbiBwcm9qZWN0TGlzdEJ1aWxkZXIoKSB7XG4gICAgY2xlYXJFbGVtZW50KHByb2plY3RMaXN0Q29udGFpbmVyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHByb2plY3RMaXN0Q29udGFpbmVyLmFwcGVuZChwcm9qZWN0Q2FyZEJ1aWxkZXIocHJvamVjdHNbaV0ubmFtZSwgaSkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhZ2VMb2FkZXIoKSB7XG4gICAgcHJvamVjdExpc3RCdWlsZGVyKCk7XG59IiwiaW1wb3J0IHsgcHJvamVjdHMsIGFkZE5ld1Byb2plY3QgfSBmcm9tIFwiLi9wcm9qZWN0TWFuYWdlclwiO1xuaW1wb3J0IHsgcHJvamVjdENhcmRCdWlsZGVyLCB0b2RvQ2FyZEJ1aWxkZXIsIGNsZWFyRWxlbWVudCB9IGZyb20gXCIuL2RvbUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IHBhZ2VMb2FkZXIgfSBmcm9tIFwiLi9wYWdlTG9hZGVyXCI7XG5cbmNvbnN0IG5ld1Byb2plY3RCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3UHJvamVjdEJ1dHRvbicpO1xuY29uc3QgcHJvamVjdElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld1Byb2plY3RJbnB1dCcpO1xuY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdExpc3QnKTtcblxubmV3UHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4geyAvL3dpbGwgbmVlZCB0byByZXdvcmsgdGhpcyB0byBhZGQgdG8gc3RvcmFnZSBhcnJheSByYXRoZXIgdGhhbiBkaXJlY3RseSB0byBET01cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHByb2plY3RJbnB1dC52YWx1ZSA9PSAnJyB8fCBudWxsKSByZXR1cm47XG4gICAgY2xlYXJFbGVtZW50KHByb2plY3RMaXN0KTtcbiAgICBhZGROZXdQcm9qZWN0KHByb2plY3RJbnB1dC52YWx1ZSk7XG4gICAgcGFnZUxvYWRlcigpO1xuICAgIHByb2plY3RJbnB1dC52YWx1ZSA9ICcnO1xuICAgIGNvbnNvbGUubG9nKHByb2plY3RzKTtcbn0pXG5cbnBhZ2VMb2FkZXIoKTsiXSwibmFtZXMiOlsicHJvamVjdHMiLCJuYW1lIiwidG9kb3MiLCJ0aXRsZSIsImR1ZURhdGUiLCJjbGVhckVsZW1lbnQiLCJlbGVtZW50IiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiZWxlbWVudEJ1aWxkZXIiLCJjbGFzc0xpc3QiLCJ0ZXh0Q29udGVudCIsImRhdGFOYW1lIiwieGVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJmb3JFYWNoIiwiY2xhc3NMYWJlbCIsImFkZCIsInZhbHVlIiwiZGF0YXNldCIsInByb2plY3RMaXN0Q29udGFpbmVyIiwicXVlcnlTZWxlY3RvciIsInBhZ2VMb2FkZXIiLCJpIiwibGVuZ3RoIiwiYXBwZW5kIiwicHJvamVjdExpc3RCdWlsZGVyIiwibmV3UHJvamVjdEJ1dHRvbiIsInByb2plY3RJbnB1dCIsInByb2plY3RMaXN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInB1c2giLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==